cq_aggregate_qnode            CREATE CONTINUOUS QUERY cq_aggregate_qnode ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(qguid) AS qguid, mean(network_bandwidth) AS network_bandwidth, mean(network_usage) AS network_usage, mean(current_load) AS current_load, mean(cpu_count) AS cpu_count, mean(cpu_available_high) AS cpu_available_high, mean(cpu_available_low) AS cpu_available_low, last(maintenance_mode) AS maintenance_mode, last(maintenance_time) AS maintenance_time, last(connected_apis) AS connected_apis, last(comments) AS comments, last(core_version) AS core_version, last(children_nodes) AS children_nodes INTO hpc.two_months.qnode_state FROM hpc.two_weeks.qnode_state GROUP BY time(1h), * END
cq_aggregate_qbox             CREATE CONTINUOUS QUERY cq_aggregate_qbox ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(qguid) AS qguid, mean(network_bandwidth) AS network_bandwidth, mean(network_usage) AS network_usage, mean(current_load) AS current_load, mean(cpu_count) AS cpu_count, mean(cpu_available_high) AS cpu_available_high, mean(cpu_available_low) AS cpu_available_low, last(maintenance_mode) AS maintenance_mode, last(maintenance_reason) AS maintenance_reason, last(maintenance_time) AS maintenance_time, last(cluster_tags) AS cluster_tags, last(comments) AS comments, last(ver_core) AS ver_core, last(children_nodes) AS children_nodes, last(core_version) AS core_version, last(reporting_date) AS reporting_date, last(sampling_time) AS sampling_time INTO hpc.two_months.qbox_state FROM hpc.two_weeks.qbox_state GROUP BY time(1h), * END
cq_aggregate_qrad             CREATE CONTINUOUS QUERY cq_aggregate_qrad ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(qguid) AS qguid, mean(ambient_temperature) AS ambient_temperature, mean(ambient_temperature_offset) AS ambient_temperature_offset, mean(heatsink_temperature) AS heatsink_temperature, mean(target_temperature) AS target_temperature, mean(power_consumption_main) AS power_consumption_main, mean(power_consumption_main_watt_hour) AS power_consumption_main_watt_hour, mean(instant_power) AS instant_power, mean(power_consumption_aux) AS power_consumption_aux, mean(power_consumption_aux_watt_hour) AS power_consumption_aux_watt_hour, mean(power_instant_aux) AS power_instant_aux, mean(power_instant_main) AS power_instant_main, last(parent_nodes) AS parent_nodes, last(children_nodes) AS children_nodes, last(friendly_name) AS friendly_name, last(sampling_time) AS sampling_time INTO hpc.two_months.qrad_state FROM hpc.two_weeks.qrad_state GROUP BY time(1h), * END
cq_aggregate_mobo             CREATE CONTINUOUS QUERY cq_aggregate_mobo ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(qguid) AS qguid, mean(memory_size) AS memory_size, mean(memory_usage) AS memory_usage, mean(cpu_scaling_frequency) AS cpu_scaling_frequency, mean(motherboard_cpu_temperature) AS motherboard_cpu_temperature, mean(cpu_frequency) AS cpu_frequency, mean(cpu_instant_power) AS cpu_instant_power, mean(cpu_temperature) AS cpu_temperature, mean(cpu_cores) AS cpu_cores, mean(cpu_threads) AS cpu_threads, mean(cpu_usage) AS cpu_usage, mean(cpu_payload_usage) AS cpu_payload_usage, mean(stat_tx_mb) AS stat_tx_mb, mean(stat_rx_mb) AS stat_rx_mb, last(mobo_state) AS mobo_state, last(machine_state) AS machine_state, last(current_frame) AS current_frame, last(current_task_priority) AS current_task_priority INTO hpc.two_months.qmobo_state FROM hpc.two_weeks.qmobo_state GROUP BY time(10m), * END
cq_aggregate_instance_slot    CREATE CONTINUOUS QUERY cq_aggregate_instance_slot ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last("name") AS "name", last(mobo_guid) AS mobo_guid, last(current_instance_guid) AS current_instance_guid, last(current_instance_number) AS current_instance_guid, last(reserved_for_instance_guid) AS reserved_for_instance_guid, last(reserved_for_instance_number) AS reserved_for_instance_number, last(state) AS state, last(slot_id) AS slot_id INTO hpc.two_months.instance_slot_state FROM hpc.two_weeks.instance_slot_state GROUP BY time(1h), * END
cq_aggregate_qtask            CREATE CONTINUOUS QUERY cq_aggregate_qtask ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(qguid) AS qguid, last(session) AS session, last("name") AS "name", last(custom_guid) AS custom_guid, last(custom_tag) AS custom_tag, last(attached_node) AS attached_node, last(root_node) AS root_node, last(priority) AS priority, last(attached_node) AS attached_node, last(progress_compute) AS progress_compute, last(progress_download) AS progress_download, last(progress_upload) AS progress_upload, last(time_compute) AS time_compute, last(time_compute_by_cpu_model) AS time_compute_by_cpu_model, last(/time_compute_by_cpu_model_*/), last(/time_compute_ghz_by_cpu_model_*/), last(time_compute_ghz) AS time_compute_ghz, last(time_environment) AS time_environment, last(time_download) AS time_download, last(cpu_average_ghz) AS cpu_average_ghz, last(creation_date) AS creation_date, last(initial_range) AS initial_range INTO hpc.two_months.qtask_state FROM hpc.two_weeks.qtask_state GROUP BY time(5m), * END
cq_aggregate_qchunk           CREATE CONTINUOUS QUERY cq_aggregate_qchunk ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(session) AS session, last(cpu_model) AS cpu_model, last(q_mobo) AS q_mobo, last("name") AS "name", last(priority) AS priority, last(state) AS state, last(time_compute) AS time_compute, last(time_compute_ghz) AS time_compute_ghz, last(time_environment) AS time_environment, last(time_download) AS time_download, last(time_upload) AS time_upload, last(cpu_average_ghz) AS cpu_average_ghz, last(creation_date) AS creation_date, last(completion_date) AS completion_date, last(failed_range) AS failed_range, last(failure_cause) AS failure_cause, last(initial_range) AS initial_range, last(processed_range) AS processed_range INTO hpc.two_months.qchunk_state FROM hpc.two_weeks.qchunk_state GROUP BY time(5m), * END
cq_aggregate_qjob             CREATE CONTINUOUS QUERY cq_aggregate_qjob ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT last(custom_guid) AS custom_guid, last(creation_date) AS creation_date, last(completion_date) AS completion_date, last("name") AS "name", last(priority) AS priority, last(initial_range) AS initial_range, last(failed_range) AS failed_range, last(processed_range) AS processed_range, last(computed_range) AS computed_range, last(failure_cause) AS failure_cause, last(custom_guid) AS custom_guid, last(cpu_average_ghz) AS cpu_average_ghz, last(session) AS session, last(state) AS state, last(time_compute) AS time_compute, last(/time_compute_by_cpu_model_*/), last(time_compute_ghz) AS time_compute_ghz, last(/time_compute_ghz_by_cpu_model_*/), last(time_environment) AS time_environment, last(time_download) AS time_download, last(time_upload) AS time_upload, last(/cpu_avr_ghz_by_cpu_model_*/) INTO hpc.two_months.qjob_state FROM hpc.two_weeks.qjob_state GROUP BY time(5m), * END
cq_archive_qnode              CREATE CONTINUOUS QUERY cq_archive_qnode ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(qguid) AS qguid, mean(network_bandwidth) AS network_bandwidth, mean(network_usage) AS network_usage, mean(current_load) AS current_load, mean(cpu_count) AS cpu_count, mean(cpu_available_high) AS cpu_available_high, mean(cpu_available_low) AS cpu_available_low, last(maintenance_mode) AS maintenance_mode, last(maintenance_time) AS maintenance_time, last(connected_apis) AS connected_apis, last(comments) AS comments, last(core_version) AS core_version, last(children_nodes) AS children_nodes INTO hpc.five_years.qnode_state FROM hpc.two_weeks.qnode_state GROUP BY time(1d), * END
cq_archive_qbox               CREATE CONTINUOUS QUERY cq_archive_qbox ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(qguid) AS qguid, mean(network_bandwidth) AS network_bandwidth, mean(network_usage) AS network_usage, mean(current_load) AS current_load, mean(cpu_count) AS cpu_count, mean(cpu_available_high) AS cpu_available_high, mean(cpu_available_low) AS cpu_available_low, last(maintenance_mode) AS maintenance_mode, last(maintenance_reason) AS maintenance_reason, last(maintenance_time) AS maintenance_time, last(cluster_tags) AS cluster_tags, last(comments) AS comments, last(ver_core) AS ver_core, last(children_nodes) AS children_nodes, last(core_version) AS core_version, last(reporting_date) AS reporting_date, last(sampling_time) AS sampling_time INTO hpc.five_years.qbox_state FROM hpc.two_weeks.qbox_state GROUP BY time(1d), * END
cq_archive_qrad               CREATE CONTINUOUS QUERY cq_archive_qrad ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(qguid) AS qguid, mean(ambient_temperature) AS ambient_temperature, mean(ambient_temperature_offset) AS ambient_temperature_offset, mean(heatsink_temperature) AS heatsink_temperature, mean(target_temperature) AS target_temperature, mean(power_consumption_main) AS power_consumption_main, mean(power_consumption_main_watt_hour) AS power_consumption_main_watt_hour, mean(instant_power) AS instant_power, mean(power_consumption_aux) AS power_consumption_aux, mean(power_consumption_aux_watt_hour) AS power_consumption_aux_watt_hour, mean(power_instant_aux) AS power_instant_aux, mean(power_instant_main) AS power_instant_main, last(parent_nodes) AS parent_nodes, last(children_nodes) AS children_nodes, last(friendly_name) AS friendly_name, last(sampling_time) AS sampling_time INTO hpc.five_years.qrad_state FROM hpc.two_weeks.qrad_state GROUP BY time(1d), * END
cq_archive_mobo               CREATE CONTINUOUS QUERY cq_archive_mobo ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(qguid) AS qguid, mean(memory_size) AS memory_size, mean(memory_usage) AS memory_usage, mean(cpu_scaling_frequency) AS cpu_scaling_frequency, mean(motherboard_cpu_temperature) AS motherboard_cpu_temperature, mean(cpu_frequency) AS cpu_frequency, mean(cpu_instant_power) AS cpu_instant_power, mean(cpu_temperature) AS cpu_temperature, mean(cpu_cores) AS cpu_cores, mean(cpu_threads) AS cpu_threads, mean(cpu_usage) AS cpu_usage, mean(cpu_payload_usage) AS cpu_payload_usage, mean(stat_tx_mb) AS stat_tx_mb, mean(stat_rx_mb) AS stat_rx_mb, last(mobo_state) AS mobo_state, last(machine_state) AS machine_state, last(current_frame) AS current_frame, last(current_task_priority) AS current_task_priority INTO hpc.five_years.qmobo_state FROM hpc.two_weeks.qmobo_state GROUP BY time(6h), * END
cq_archive_instance_slot      CREATE CONTINUOUS QUERY cq_archive_instance_slot ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last("name") AS "name", last(mobo_guid) AS mobo_guid, last(current_instance_guid) AS current_instance_guid, last(current_instance_number) AS current_instance_guid, last(reserved_for_instance_guid) AS reserved_for_instance_guid, last(reserved_for_instance_number) AS reserved_for_instance_number, last(state) AS state, last(slot_id) AS slot_id INTO hpc.five_years.instance_slot_state FROM hpc.two_weeks.instance_slot_state GROUP BY time(1h), * END
cq_archive_qtask              CREATE CONTINUOUS QUERY cq_archive_qtask ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(qguid) AS qguid, last(session) AS session, last("name") AS "name", last(custom_guid) AS custom_guid, last(custom_tag) AS custom_tag, last(attached_node) AS attached_node, last(root_node) AS root_node, last(priority) AS priority, last(attached_node) AS attached_node, last(progress_compute) AS progress_compute, last(progress_download) AS progress_download, last(progress_upload) AS progress_upload, last(time_compute) AS time_compute, last(time_compute_by_cpu_model) AS time_compute_by_cpu_model, last(/time_compute_by_cpu_model_*/), last(/time_compute_ghz_by_cpu_model_*/), last(time_compute_ghz) AS time_compute_ghz, last(time_environment) AS time_environment, last(time_download) AS time_download, last(cpu_average_ghz) AS cpu_average_ghz, last(creation_date) AS creation_date, last(initial_range) AS initial_range INTO hpc.five_years.qtask_state FROM hpc.two_weeks.qtask_state GROUP BY time(1h), * END
cq_archive_qchunk             CREATE CONTINUOUS QUERY cq_archive_qchunk ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(session) AS session, last(cpu_model) AS cpu_model, last(q_mobo) AS q_mobo, last("name") AS "name", last(priority) AS priority, last(state) AS state, last(time_compute) AS time_compute, last(time_compute_ghz) AS time_compute_ghz, last(time_environment) AS time_environment, last(time_download) AS time_download, last(time_upload) AS time_upload, last(cpu_average_ghz) AS cpu_average_ghz, last(creation_date) AS creation_date, last(completion_date) AS completion_date, last(failed_range) AS failed_range, last(failure_cause) AS failure_cause, last(initial_range) AS initial_range, last(processed_range) AS processed_range INTO hpc.five_years.qchunk_state FROM hpc.two_weeks.qchunk_state GROUP BY time(1h), * END
cq_archive_qjob               CREATE CONTINUOUS QUERY cq_archive_qjob ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT last(custom_guid) AS custom_guid, last(creation_date) AS creation_date, last(completion_date) AS completion_date, last("name") AS "name", last(priority) AS priority, last(initial_range) AS initial_range, last(failed_range) AS failed_range, last(processed_range) AS processed_range, last(computed_range) AS computed_range, last(failure_cause) AS failure_cause, last(custom_guid) AS custom_guid, last(cpu_average_ghz) AS cpu_average_ghz, last(session) AS session, last(state) AS state, last(time_compute) AS time_compute, last(/time_compute_by_cpu_model_*/), last(time_compute_ghz) AS time_compute_ghz, last(/time_compute_ghz_by_cpu_model_*/), last(time_environment) AS time_environment, last(time_download) AS time_download, last(time_upload) AS time_upload, last(/cpu_avr_ghz_by_cpu_model_*/) INTO hpc.five_years.qjob_state FROM hpc.two_weeks.qjob_state GROUP BY time(1h), * END
cq_aggregate_transfer_history CREATE CONTINUOUS QUERY cq_aggregate_transfer_history ON hpc RESAMPLE EVERY 1h FOR 1h BEGIN SELECT * INTO hpc.two_months.transfer_history FROM hpc.two_weeks.transfer_history GROUP BY * END
cq_archive_transfer_history   CREATE CONTINUOUS QUERY cq_archive_transfer_history ON hpc RESAMPLE EVERY 1d FOR 1d BEGIN SELECT * INTO hpc.five_years.transfer_history FROM hpc.two_weeks.transfer_history GROUP BY * END
